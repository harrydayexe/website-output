<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Harry Day</title><description>A collection of thoughts had by Harry Day.</description><link>https://harryday.xyz</link><language>en</language><lastBuildDate>Tue, 2 Jan 2024 13:03:54 +0000</lastBuildDate><pubDate>Tue, 2 Jan 2024 13:03:54 +0000</pubDate><ttl>250</ttl><atom:link href="https://harryday.xyz/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://harryday.xyz/posts/reflections-on-2023</guid><title>A Year in the Life of a Junior Developer</title><description>A reflection on the year of 2023, from the perspective of a junior developer</description><link>https://harryday.xyz/posts/reflections-on-2023</link><pubDate>Fri, 29 Dec 2023 18:20:00 +0000</pubDate><content:encoded><![CDATA[<h2>Introduction</h2><p>A lot has changed in 2023 in my life. I have finished my second year of university, started my industrial placement year at UBS, moved to London from Manchester and much more. This article is a summary of the things I have learned and experienced as well as my outlook for 2024.</p><h2>Major 2023 Milestones</h2><h3>Securing my placement and finishing year 2 of university</h3><p>The start of 2023 saw me submitting my final applications for year-long placements as part of my degree programme. You can read more about this process in my other article: <a href="https://harryday.xyz/posts/how-to-get-an-internship/">How I Landed an Internship as a Software Engineer at a Leading Financial Institution</a>. After the placement was secured, I focused back on university as well as finding a place to live in London, as I would be moving in June. This was alongside completing my second year of university, where I had a group project in Java and some other individual modules.</p><h3>Moving to London</h3><p>Soon enough, June rolled around and it was time to pack my life up and move it London. This process was smooth enough and a few weeks later I was standing outside of the building that would become my office for the next year. The first month was filled with training, onboarding and getting to know the team as well as the projects that they are working on. I wanted to make an impact and proposed building a new library which would enable my team, and other teams within the function, to be able to access some of our services. This project occupied most of my time for the first month and was quite successful with mine and multiple other teams adopting the library within their services and applications with ease.</p><h3>Forming a new team</h3><p>As I started to grow more comfortable within my role, I picked up more varied tasks and spent a lot of time working on our CI/CD pipelines. This was something that interested me and I strived to improve our pipelines and make them more resilient and useful. This work was mirroring other DevOps and platform-related tasks being completed by a few other members across the department and this led to us forming a new team focusing on enabling other application and services teams to be able to work at their maximum potential. This has been a great experience being involved in the formation of a new pod, as it has allowed me to be a part of conversations shaping the future of how this team will operate and support other developers.</p><p>Moving to this new smaller team placed me in closer, more consistent contact with a couple of far more experienced senior developers. Whilst they didn't agree on much, the different perspectives (from two different careers) were and still are extremely useful sources of knowledge. I have spent much of my time in this new team trying to soak up as much knowledge and experience from these key figures and I am forever grateful for having this opportunity.</p><h3>Advent of Code</h3><p>Finishing off the year strong, I decided to participate in <a href="https://adventofcode.com">AoC 2023</a>. The main intention behind this was to learn a new language: Go. Whilst I have not yet finished the whole challenge (the last 4 days were too busy in the lead-up to Christmas), I do think it has been useful. My proficiency in GoLang has skyrocketed from absolutely nothing at the end of November, to being confident in the language within a month. I will talk more about Go and my experience later in this post. I intend to finish off the remaining challenges at some point in the new year, however, I am happy with what I have accomplished so far (the maths and algorithms are starting to get a bit ahead of me now).</p><h2>My Developer Experience</h2><p>Over the last year, I have grown more than I have in any previous year as a software engineer and developer. I think this is in no small part due to my 9-5 role as part of my internship. This has led to me spending far more time writing code than I have in any previous year where I have been busy with school/university.</p><blockquote><p>At the time of writing (29th December 2023) I have committed 1936 times.</p></blockquote><h3>Languages</h3><p>This year I have learnt a few new languages as well as improved at ones I already knew. At university, our group project was written in Java, however, we also gained exposure to plenty of other languages, covering the basics of C/C++, Rust, Haskell, Java and Python. Whilst some of these I knew already, gaining some experience in Rust and Haskell as well as more time to try out C++ was useful. I think that Rust is something I would like to explore more of (especially after watching ThePrimeagen) as this was only covered very briefly at the end of my second year of university.</p><p>At work, we write almost everything in C# and DotNet. Overall I do not mind this language, I feel like I can accomplish everything I need to without being limited. DotNet can be a daunting framework to come up against, but with the help of other more experienced developers around me, I have navigated learning the basics well and as always learnt plenty about how different people believe things should be done.</p><p>Advent of Code, as mentioned earlier, was something I used to help provide some challenges as I began to learn GoLang and I think this was rather successful. There are of course still more complex parts of the language that I haven't yet come across needing but hopefully, these will all be explored in time. I have many thoughts on GoLang, but ultimately I do like the language. I enjoy the explicitness around errors and handling them compared to throwing exceptions (I think that Swift does a good job with this style of error handling). I think that sometimes the STL can let Go down, for example, a set is a common structure I needed during AoC and I ended up having to use a dictionary which worked but wasn't as nice syntactically.</p><pre><code><span class="splashClasskeyword">var</span> someSet = <span class="splashClasscall">make</span>(map[string]<span class="splashClasskeyword">struct</span>{})

someSet[<span class="splashClassstring">"someKey"</span>] = <span class="splashClasskeyword">struct</span>{}{}

<span class="splashClasskeyword">_</span>, prs := someSet[<span class="splashClassstring">"someKey"</span>]
<span class="splashClasskeyword">if</span> prs {
    <span class="splashClasscomment">// someKey is in the set</span>
}
</code></pre><p>I think that for 2024, my focus will be split across a few main areas: 1. Continuing my development using Go and Swift as these are both languages I enjoy using and think are quite capable. 2. Learn the basics of Rust and OCaml, I want to build a few projects using each to gain some more experience with them 3. Continue to develop my C# and DotNet knowledge whilst on my internship</p><h3>Cloud and Kubernetes</h3><p>Working inside a large firm has also provided me with exposure to complex cloud environments that I otherwise would not be able to. In particular, one of the senior developers I work with is a Kubernetes nutcase and has taught me plenty about how it works and best practices. This has been a useful experience and has led me to be more mindful about how an application or service I am writing would be deployed to some sort of containerised environment.</p><p>I do however also see that some teams fall into the trap of putting absolutely everything into an AKS cluster and spending far more money than they need to just to deploy one simple service. With great power comes great responsibility (and bills) and I do see K8 being overused when a simpler solution would also fit the requirements just fine.</p><p>In the new year, I want to focus more on how we manage and deploy our cloud environment at work. In particular, my team is leading the charge with the adoption of Terraform in the firm so this shall hopefully provide an exciting opportunity to learn and develop some documentation and tooling for other teams to use.</p><h3>Tooling</h3><p>For the past few years, my editor of choice has been Atom. Once this was sunsetted I switched to VSCode but was never quite satisfied with it. I picked up the JetBrains suite of tools as I am eligible for their student offerings and liked the built-in features dedicated to the respective language. IntelliJ IDEA got me comfortably through my Java work at uni (despite the professors' suggestions to use Eclipse🤮).</p><p>Entering the back end of the year, I was red-pilled into switching from the traditional editor experience and installing Vim plugins. I committed to this across all my editors both at home and at work. I am slowly getting faster and faster, whilst discovering new motions I didn't know about. Whilst the initial impact slowed me down drastically, I do think I am writing faster than I have before. It is just a matter of slowly unlearning bad habits (like touching the mouse to move the cursor).</p><p>This was put into effect around October and I think that Vim motions plugins for Visual Studio and IntelliJ was the right step, however, there was still the golden goose that I was ultimately chasing. ✨NeoVim✨</p><p>So that's why at the start of December I installed NeoVim and started to use it. My strategy was not to go cold turkey on normal editors (this is impossible anyway as I am unable to use NeoVim at work and therefore have to stick with Visual Studio there), but I slowly started to transition. Advent of Code was still mostly written in GoLand by JetBrains as I have still not figured out how I want debugging to work in Vim.</p><p>Just yesterday, I rewrote my NeoVim config from scratch by hand. Originally I started with just using Kickstart (and boy am I glad I did that and not go down the NVChad route) however I wasn't 100% happy with the keymaps and plugins. Rather than trying to Frankenstein a custom config from Kickstart, I wrote my own.</p><p>It is based heavily on the things I liked from Kickstart, however includes more personalised keymaps, less bloat with some things I don't need, and of course <a href="https://github.com/ThePrimeagen/harpoon">Harpoon</a>.</p><p>I am sure my <a href="https://github.com/harrydayexe/dotfiles/tree/main/nvim">config</a> will evolve as my needs change, but for now, I am happy with it. My end goal is to cut my reliance on other external editors and write everything in NeoVim. For now, this is not possible at work due to limitations out of my control, however, at home and when I am back in university in September, this is certainly my goal.</p><h2>Conclusion</h2><p>2023 was a great year for me as a developer and as a human. I have achieved more than I thought I could and I am looking to do the same again in 2024. A renewed focus on my health, sleep, and fitness, alongside a renewed passion for software engineering, shall hopefully drive me to my goals.</p><p>If you are interested in reading more, I upload a blog post semi-frequently (whenever something interesting comes up to write about) however I am aiming to do this more. My other posts can be found <a href="https://harryday.xyz/posts/">here</a>.</p><p>Check me out in other places on the interwebs:</p><ul><li>X <a href="https://twitter.com/harrydayexe">@harrydayexe</a></li><li>GitHub <a href="https://github.com/harrydayexe">@harrydayexe</a></li><li>LinkedIn <a href="https://www.linkedin.com/in/harrydayexe">/harrydayexe</a></li><li>(Are you seeing the trend yet)</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://harryday.xyz/posts/hackathon-2023</guid><title>My First Hackathon</title><description>Describing my first hackathon and the project I created.</description><link>https://harryday.xyz/posts/hackathon-2023</link><pubDate>Tue, 24 Oct 2023 19:20:00 +0100</pubDate><content:encoded><![CDATA[<p>Last week I had the opportunity to take part in a global hackathon at the bank where I work. This event took place over two days, and I entered as part of a team of junior talent, made up of interns and grads.</p><p>The brief for the hackathon was rather simple. There were a few categories you could build a project under, or a “BYOI” (bring your own idea) category which was a catch-all for anything else. Building something to improve the bank.</p><h2>The Problem</h2><p>We have an internal tool that maintains authorisation and access rights to practically everything in the bank. Need write access to a particular GitLab group? You need to submit the right request. Need to be able to send external emails? You need to submit the right request. The internal tool has a rather unfriendly (to put it politely) interface and is very confusing for new joiners to understand and use. As a team of relatively new joiners, we understood the pain of this system well and were determined to improve it.</p><h2>The Solution</h2><p>Our team’s plan was simple. We would create an AI chatbot that you could ask a question to, and it would provide the relevant permission code to request. For example, telling the bot “I want to edit and maintain X GitLab repo” would return a response along the lines of “To access this repo, you should request X permission with Y authorisation code”.</p><p>In a production version of this application, this data could be scraped from existing internal documentation pages, however, for the proof of concept that we needed to deliver, we decided to pull out a couple of examples of these requests and provide them directly to the AI.</p><h2>The Design</h2><p>As part of the hackathon, the bank made available an internal AI platform which utilised OpenAI’s tools. We used a stateless system, maintaining a queue of system messages and conversation history in the backend, with this being passed in each API request. This means that no potentially confidential information was stored in OpenAI.</p><p>These API requests were driven from a NodeJS server. This server monitored web sockets for incoming user messages, which would then be formatted into a request to the OpenAI API. Once a response was received, this was passed back to the client through the web socket.</p><p>On the client side, we used React to build a simple chatbot interface that could monitor a web socket for incoming messages, and display them on the screen.</p><h2>Implementation</h2><p>On the first day of the hackathon, we sat down and quickly planned out what each person would be doing. I was allocated to working on the server side NodeJS work. The first day went well, we started programming around 11 am and by about 8 pm I had finished the server. In parallel, the front-end team developed an initial react app up until they called it a day around 9 p.m.</p><p>Coming into day 2, our code freeze was 1 pm. We started full steam ahead at 9 a.m. and realised we still had lots of work ahead of us. Plagued by npm issues on multiple laptops, we eventually got both the client and server working on the same machine at the same time. Once communication was working via the web socket, it was time to merge the code into the main branch and get ready for our presentation.</p><h2>Presentation</h2><p>We had a quick lunch and then headed into the auditorium for the presentations of the projects created by the London-based teams. Our turn was about halfway through and we went for a Dragon’s Den style pitch to spice things up. An explanation of the problem we were trying to solve, a quick demo and a few jokes later and we were headed off the stage to a round of applause. Speaking to some members of the audience, they seemed to like our presentation but there was tough competition from other teams with very useful projects so we weren’t overly confident.</p><h2>The Results</h2><p>In the end, our team was not shortlisted for the finals as the competition was tough. We certainly learned a lot over the 2 days and it was a great experience overall. As a team comprised of only junior talent, I would say that we held our own and could be proud of the work we produced. It is something I would try again.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://harryday.xyz/posts/how-to-get-an-internship</guid><title>How I Landed an Internship as a Software Engineer at a Leading Financial Institution</title><description>An A-Z guide on the application and interview process, to land your first role in tech as an intern.</description><link>https://harryday.xyz/posts/how-to-get-an-internship</link><pubDate>Wed, 23 Aug 2023 19:37:00 +0100</pubDate><content:encoded><![CDATA[<h2>Background</h2><p>Hi, my name is Harry Day and I am currently on a 12-month industrial placement as a software developer at one of the world’s leading financial firms. As part of my role, I am supporting the asset management business area by developing tooling and applications so they can remain at the forefront of the space. This article is meant to serve those interested in applying to summer internships and placement years in Computer Science roles.</p><h2>My Journey</h2><p>I’ll be honest with you for a second. Getting onto these placements is hard. I was told that there were over 10,000 applicants for only 200 roles at the firm I work in. That’s a 50:1 ratio. So how do you do it?</p><p>Between September 2022 and New Year’s Eve 2022, I applied to just under 40 different companies for year-long placement programs. Of these 37 companies, I completed 4 video interviews (prerecorded questions that you have a minute or two to record an answer for), which then narrowed down to 2 interviews (this includes Zoom interviews and in-person interviews) and finally one offer.</p><p>Admittedly I never went to the second interview after receiving the first offer as I didn’t want to work at the second company anyway. Now I didn’t apply to the most placements compared to other people I know, but that doesn’t mean that the process wasn’t still exhausting. Nowadays, every company wants you to copy every section of your CV into a form on their website so that a robot can read it, rather than just allowing you to upload a PDF.</p><p>I didn’t hear back from many companies until later in the year, in fact, both my interviews came within a few weeks around the Christmas period. The actual process for the firm that eventually gave me an offer went as so. I applied via a form on their website. A few days later I completed a video interview, By this point, I had plenty of experience with these but more on that later. A week or so after that video interview, I progressed to the next stage and completed two interviews with people at the firm on Zoom. Finally, the next day I received a telephone call with an offer for a year-long placement. Let's break the process down a bit more</p><h2>The Process</h2><p>The first stage for most companies after applying is usually a pre-recorded video interview. This is where a company uses a third-party SaaS platform to ask you questions and allow you to record a video answer. These questions are normally culture and personality-based. For example “What’s a difficult moment you were particularly proud of how you handled”. Now I suck at these kind of questions. When I did a Bank of America interview, they asked a question I had no obvious answer to, and the video started recording while I still had my head in my hands. I quit the interview at that point and unsurprisingly did not get any further. There’s not much you can do for this kind of interview other than practice and prepare some answers from common questions you find online.</p><p>Some companies will also require you to do a coding challenge online on a platform similar to <a href="https://leetcode.com">LeetCode</a>. For internships and year-long placements, these are normally not too challenging and should be relatively easy if you have some programming experience. You can practice these by doing some LeetCode challenges. I recommend working through the order found on <a href="https://neetcode.io/roadmap">NeetCode</a>.</p><p>After this, your application process will go one of two ways. You will be rejected, or invited to a further interview. These further interviews are usually in person or on Zoom (in-person interviews are sometimes accompanied by team exercises to see how well you can integrate into a team). Interviews for technical jobs such as software developers usually involve a technical interview with someone on a team you may be involved in, and an interview with an HR person to see if you’re a good fit for the company.</p><h2>How to Ace Interviews</h2><p>Technical interviews usually involve one or two questions. The aim of these interviews is not necessarily to see if you can solve the problem most efficiently but to understand how you work through problems. For that reason, they are usually “whiteboard problems” where you talk through the solution with your interview and explain your thinking and reasoning.</p><p>The best way to master these interviews is to explain everything you’re thinking, even if it seems small. If an interviewer likes the avenue of thinking you’re going down they will keep you going down that path and towards the solution. Or they may try and steer you back onto the right track by suggesting other considerations.</p><p>Interviews with HR are normally about culture, company ethos and ethics. There isn’t as much to practice here as it varies from company to company, but do your research on the company you are interviewing at. Most companies will have a page on their website explaining their ethos, principles and ethics. Review these and just see how the interview progresses.</p><h2>The Phone Call</h2><p>If all has gone well, you will most likely receive a phone call in a week or two after your interview with an offer for the internship or placement. For placements and internships at larger firms, FAANG, financial institutes etc., the programs are normally well established and there is no wiggle room on salary. However, the salaries at these firms are normally far above the average for a placement (in the UK the average is around £20,000pa for those outside of London).</p><p>Smaller firms and software companies may have some more wiggle room, especially if you’re the only intern starting there. If you think you are being undervalued, make sure to bring that up calmly and reasonably on the phone. Chances are there may be a small increase available.</p><h2>Final Advice</h2><p>Prepare to be rejected. Most companies will ghost you. Some will send a pre-made email saying you were unsuccessful. If you are rejected after an interview you will normally be told this via a phone call. This is a great time to ask if there was a particular reason why and if there was any feedback from the application process. Finally, apply to as many companies and industries as you can. There aren’t many internships available and there are thousands of applicants every year, Be persistent and keep driving. Some places still have internships available late in the year just before exam season, so don’t give up.</p><p>The best way to stand out and get a placement is to have something interesting on your CV. A personal project, lots of contributions to open source, GitHub and LinkedIn are your best friends. For me, my app <a href="https://songlinkr.harryday.xyz">SongLinkr</a> on the App Store was a great talking point in my interviews and something that was asked about by recruiters. Even if it is not relevant to the company in any way, it shows commitment to a piece of work and the use of a toolchain. Feel free to connect on <a href="https://www.linkedin.com/in/harrydayexe/">LinkedIn</a> (even if you just want to boost your connection count) and check out my <a href="https://github.com/harrydayexe">GitHub</a>. Good Luck and Happy Hunting.</p>]]></content:encoded></item></channel></rss>